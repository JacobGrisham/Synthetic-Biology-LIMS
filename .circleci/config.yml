# Utilize caching: https://circleci.com/docs/2.0/caching/
version: 2.1

orbs:
  coverage-reporter: codacy/coverage-reporter@11.5.0 # Invoke the Codacy Code Coverage orb

# Re-usable commands
commands:
  avoid_non-deployment_updates:
    steps:
      - run:
          name: Avoid Non-Deployment Updates
          command: |
            changes=`git show --name-only ${CIRCLE_SHA1} | tail -n +7`

            if [ "$changes" = ".circleci/config.yml" ] || [ "$changes" = "README.md" ]; then
              echo "Only found a configuration or documentation change. Stopping build"
              circleci-agent step halt
            fi

# Define the jobs we want to run for this project
jobs:
# Referenced: https://circleci.com/blog/continuous-integration-for-django-projects/
# Referenced: https://github.com/CircleCI-Public/circleci-demo-python-django/blob/master/.circleci/config.yml
  test_django:
      working_directory: ~/lims_backend
      docker:
        - image: circleci/python:3.6
        #   environment:
        #     DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
        # - image: circleci/postgres:9.6.2
        # environment:
        #   POSTGRES_USER: root
        #   POSTGRES_DB: circle_test
      steps:
        - checkout
        - restore_cache:
            keys:
              - lims-django-cache-v1-{{ .Branch }}-{{ checksum "requirements.txt" }}
              - lims-django-cache-v1-
        - run:
            name: Installing Django Dependencies
            command: |
              python3 -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt
        - save_cache:
            key: lims-django-cache-v1-{{ .Branch }}-{{ checksum "requirements.txt" }}
            paths:
              - "venv"
        - run:
            name: Running tests
            command: |
              echo $SECRET_KEY
              source venv/bin/activate
              python3 manage.py test
            environment:
              SECRET_KEY: $SECRET_KEY
        - store_test_results:
            path: ./backend/tests/test-reports/pytest
        - store_artifacts: # stores logs, binaries, etc. so that they are accessible by the app in later runs
            path: ./backend/tests/test-reports/lcov-report

  # Referenced: https://circleci.com/blog/continuously-testing-react-applications-with-jest-and-enzyme/
  test_react:
    working_directory: ~/lims_frontend
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache: # restores any cache that is available from a previous build
          keys:
            - lims-react-cache-v1-{{ checksum "package-lock.json" }}
            - lims-react-cache-v1- # if only a few changes, then don't rebuild entire node modules
      - run:
          name: Installing React Dependencies
          command: npm ci # Referenced: https://docs.npmjs.com/cli/v7/commands/npm-ci
      - save_cache: # save our cache of the npm dependencies
          key: lims-react-cache-v1-{{ checksum "package-lock.json" }}
          paths:
            - /home/circleci/.npm # this is where the npm cache is stored when we use npm ci
      - run:
          name: Run Tests
          command: npm test
      - store_test_results:
          path: ./frontend/src/tests/jest-reports
      - store_artifacts: # stores logs, binaries, etc. so that they are accessible by the app in later runs
          path: ./frontend/tests/coverage/lcov-report

  codacy-coverage-report:
    docker:
      - image: 'circleci/openjdk:8-jdk'
    steps:
      - checkout
      # run commands to generate the coverage result
      - coverage-reporter/send_report:
          coverage-reports: 'frontend/src/tests/coverage/lcov.info'
          project-token: $CODACY_PROJECT_TOKEN
  
  # deploy_AWS job: goes here

# Orchestrate our job run sequence
workflows:
    version: 2
    build-test-deploy:
        jobs:
            - test_django
            - test_react
            - codacy-coverage-report
            # - build_react:
            #     requires:
            #       - test_react
            # deploy_AWS: job goes here
            #     requires:
            #       - test_django
            #       - build_react
            #      filters:
            #         branches:
            #           only: master