# Utilize caching: https://circleci.com/docs/2.0/caching/
version: 2.1

# Re-usable commands
commands:
  avoid_non-deployment_updates:
    steps:
      - run:
          name: Avoid Non-Deployment Updates
          command: |
            changes=`git show --name-only ${CIRCLE_SHA1} | tail -n +7`

            if [ "$changes" = ".circleci/config.yml" ] || [ "$changes" = "README.md" ]; then
              echo "Only found a configuration or documentation change. Stopping build"
              circleci-agent step halt
            fi

# Define the jobs we want to run for this project
jobs:
# Referenced: https://circleci.com/blog/continuous-integration-for-django-projects/
# Referenced: https://github.com/CircleCI-Public/circleci-demo-python-django/blob/master/.circleci/config.yml
  test_django:
      working_directory: ~/lims/django-backend
      docker:
        - image: circleci/python:3.6
          environment:
            DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
        - image: circleci/postgres:9.6.2
          environment:
            PGHOST: localhost
            PGUSER: circleci
            POSTGRES_USER: jacobdavidgrisham
            POSTGRES_DB: circle_test
            POSTGRES_HOST_AUTH_METHOD: trust
      steps:
        - checkout:
            path: ~/lims
        - run:
            name: Configuring Environment
            command: |
              touch .env
              echo SECRET_KEY=$SECRET_KEY >> .env
              echo DB_PASSWORD=$DB_PASSWORD >> .env
        - run:
            name: Waiting for db to run
            command: dockerize -wait tcp://localhost:5432 -timeout 1m
        - restore_cache:
            keys:
              - lims-django-cache-v1-{{ .Branch }}-{{ checksum "requirements.txt" }}
              - lims-django-cache-v1-
        - run:
            name: Installing Django Dependencies
            command: |
              python3 -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt
        - save_cache:
            key: lims-django-cache-v1-{{ .Branch }}-{{ checksum "requirements.txt" }}
            paths:
              - "venv"
        - run:
            name: Running tests
            command: |
              source venv/bin/activate
              pytest --junitxml=backend/pytest/junit.xml --cov=backend/tests/ --cov-report xml:backend/coverage/cov.xml --html=./backend/coverage/report.html
        - store_test_results:
            path: ./backend/pytest
        - store_artifacts: # stores logs, binaries, etc. so that they are accessible by the app in later runs
            path: ./backend/coverage
        - run:
            name: Uploading Coverage to CodeCov
            command: |
              curl -Os https://uploader.codecov.io/latest/linux/codecov
              chmod +x codecov
              ./codecov  -f backend/coverage/cov.xml -F backend -t ${CODECOV_TOKEN}

  # Referenced: https://circleci.com/blog/continuously-testing-react-applications-with-jest-and-enzyme/
  test_react:
    working_directory: ~/lims/react-frontend/frontend # set working directory as this, but must checkout code one directory higher via path
    docker:
      - image: circleci/node:14.16.1
    steps:
      - checkout:
          path: ~/lims 
      - restore_cache: # restores any cache that is available from a previous build
          keys:
            - lims-react-cache-v1-{{ checksum "package-lock.json" }}
            - lims-react-cache-v1- # if only a few changes, then don't rebuild entire node modules
      - run:
          name: Installing React Dependencies
          command: npm ci # Referenced: https://docs.npmjs.com/cli/v7/commands/npm-ci
      - save_cache: # save our cache of the npm dependencies
          key: lims-react-cache-v1-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm # this is where the npm cache is stored when we use npm ci
      - run:
          name: Running Tests
          command: npm run test:ci
      - store_test_results: # Reference: https://support.circleci.com/hc/en-us/articles/360021624194-Test-summary-troubleshooting
          path: ./jest 
      - store_artifacts: # stores logs, binaries, etc. so that they are accessible by the app in later runs
          path: ./coverage/lcov-report
      - run:
          name: Uploading Coverage to CodeCov
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov  -f frontend/coverage/clover.xml -F frontend -t ${CODECOV_TOKEN}
  
  # deploy_AWS job: goes here

# Orchestrate our job run sequence
workflows:
    version: 2
    build-test-deploy:
        jobs:
            - test_django
            - test_react
            # - build_react:
            #     requires:
            #       - test_react
            # deploy_AWS: job goes here
            #     requires:
            #       - test_django
            #       - build_react
            #      filters:
            #         branches:
            #           only: master